import { createSlice } from "@reduxjs/toolkit";

const authSlice=createSlice({
    name:"user",
    initialState:{
        loading:true,
        isAuthenticated:false
    },
    reducers:{
        loginRequest(state,action){
            return{
                loading:true,
                isAuthenticated:false
            }
        },
        loginSuccess(state,action){
            return{
                loading:false,
                isAuthenticated:true,
                user:action.payload.user
            }
        },
        loginFailure(state,action){
            return{
                loading:false,
                error:action.payload
            }
        },
        registerRequest(state,action){
            return{
                loading:true,
                isAuthenticated:false
            }
        },
        registerSuccess(state,action){
            return{
                loading:false,
                isAuthenticated:true,
                user:action.payload.user
            }
        },
        registerFailure(state,action){
            return{
                loading:false,
                error:action.payload
            }
        },
        clearError(state,action){
            return{
                ...state,
                error:null
            }
        },
        loadUserRequest(state,action){
            return{
                loading:true,
                isAuthenticated:false
            }
        },
        loadUserSuccess(state,action){
            return{
                loading:false,
                isAuthenticated:true,
                user:action.payload.user
            }
        },
        loadUserFailure(state,action){
            return{
                loading:false,
                error:action.payload
            }
        },

        
        logoutSuccess(state,action){
            return{
                loading:false,
                isAuthenticated:false,
                
            }
        },
        logoutFailure(state,action){
            return{
                loading:false,
                error:action.payload
            }
        },
        updateProfileRequest(state,action){
            return{
                loading:true,
                isAuthenticated:true,
                isUpdated:false
            }
        },
        updateProfileSuccess(state,action){
            return{
                loading:false,
                isAuthenticated:true,
                user:action.payload.user,
                isUpdated:true
            }
        },
        updateProfileFailure(state,action){
            return{
                loading:false,
                isAuthenticated:true,
                error:action.payload
            }
        },
        updatePasswordRequest(state,action){
            return{
                loading:true,
                isAuthenticated:true,
                isUpdated:false
            }
        },
        updatePasswordSuccess(state,action){
            return{
                loading:false,
                isAuthenticated:true,
                user:action.payload.user,
                isUpdated:true
            }
        },
        updatePasswordFailure(state,action){
            return{
                loading:false,
                isAuthenticated:true,
                error:action.payload
            }
        },
        additemRequest(state,action){
            return{
                loading:true,
                isAuthenticated:true,
            }
        },
        additemSuccess(state,action){
            return{
                loading:false,
                isAuthenticated:true,
                user:action.payload.user
            }
        },
        additemFailure(state,action){
            return{
                loading:false,
                isAuthenticated:true,
                error:action.payload
            }
        },
        deleteitemRequest(state,action){
            return{
                loading:true,
                isAuthenticated:true,
                user:action.payload.user
            }
        },
        deleteitemSuccess(state,action){
            return{
                loading:false,
                isAuthenticated:true,
                user:action.payload.user
            }
        },
        deleteitemFailure(state,action){
            return{
                loading:false,
                error:action.payload
            }
        },
        stockAddRequest(state,action){
            return{
                loading:true,
                isAuthenticated:true
            }
        },
        stockAddSuccess(state,action){
            return{
                loading:false,
                isAuthenticated:true,
                user:action.payload.user
            }
        },
        stockAddFailure(state,action){
            return{
                loading:false,
                error:action.payload
            }
        },
        shippingInfoRequest(state,action){
            return{
                loading:true,
                isAuthenticated:true
            }
        },
        shippingInfoSuccess(state,action){
            return{
                loading:false,
                isAuthenticated:true,
                user:action.payload.user
            }
        },
        shippingInfoFailure(state,action){
            return{
                loading:false,
                isAuthenticated:true,
                
            }
        },

        updateuserrequest(state,action){
            return{
                loading:true,
                isAuthenticated:true,
                
            }
        },
        updateusersuceess(state,action){
            return{
                loading:false,
                isAuthenticated:true,
                user:action.payload.user
                
            }
        },
        updateuserfailure(state,action){
            return{
                loading:false,
                isAuthenticated:true,
                error:action.payload
                
            }
        },
        allusersrequest(state,action){
            return{
                loading:true,
                isAuthenticated:true
            }
        },
        alluserssuccess(state,action){
            return{
                loading:false,
                isAuthenticated:true,
                users:action.payload.users
            }
        },
        allusersfailure(state,action){
            return{
                loading:false,
                isAuthenticated:true,
                error:action.payload
            }
        }
        
        
    }
})

const {actions,reducer}=authSlice
 export const {loginRequest,loginSuccess,loginFailure,registerRequest,registerSuccess,
    registerFailure,loadUserRequest,loadUserSuccess,loadUserFailure,
logoutSuccess,logoutFailure,updateProfileRequest,updateProfileSuccess,updateProfileFailure,
updatePasswordRequest,updatePasswordSuccess,updatePasswordFailure,additemRequest,
additemSuccess,additemFailure,deleteitemRequest,deleteitemSuccess,deleteitemFailure,
stockAddRequest,stockAddSuccess,stockAddFailure,shippingInfoRequest,shippingInfoSuccess,
shippingInfoFailure,clearError,updateuserrequest,updateusersuceess,updateuserfailure,
allusersrequest,alluserssuccess,allusersfailure}=actions
 export default reducer     